docker run -d -p 80:80 docker/getting-started

docker version - exibe a versão do docker.
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro. 
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker start ID_CONTAINER - inicia o container com id em questão.
docker stop ID_CONTAINER - interrompe o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -d -P -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.
docker run -v "[CAMINHO_VOLUME_LOCAL:]CAMINHO_VOLUME_CONTAINER" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container, caso seja especificado um caminho local monta o volume local no volume do container.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.


docker run -p 8080:3000 -v "C:\Users\Alura\Desktop\volume-exemplo:/var/www" -w "/var/www" node npm start

alura@alura-estudio-03:~$ cd Desktop/volume-exemplo/
alura@alura-estudio-03:~/Desktop/volume-exemplo$ pwd
/home/alura/Desktop/volume-exemplo

alura@alura-estudio-03:~$ cd Desktop/volume-exemplo/
alura@alura-estudio-03:~/Desktop/volume-exemplo$ pwd
/home/alura/Desktop/volume-exemplo
alura@alura-estudio-03:~/Desktop/volume-exemplo$ docker run -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start

    A entender o papel do arquivo DockerFile para criar imagens.
        O Dockerfile define os comandos para executar instalações complexas e com características específicas.
    Vimos os principais comandos como FROM, MAINTAINER, COPY, WORKDIR, RUN, EXPOSE e ENTRYPOINT
    A subir uma imagem criada através de um Dockerfile para o Docker Hub e disponibilizar para os desenvolvedores

Lembrando também:

    as imagens são read-only sempre
    um container é uma instância de uma imagem
    para guardar as alterações a docker engine cria uma nova layer em cima da última layer da imagem

Segue também uma breve lista dos comandos utilizados:

    docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
    docker build -f CAMINHO_DOCKERFILE/Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
    docker login - inicia o processo de login no Docker Hub.
    docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
    docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
	
	

Neste capítulo aprendemos:

    Que imagens criadas pelo Docker acessam a mesma rede, porém apenas através de IP.
    Ao criar uma rede é possível realizar a comunicação entre os containers através do seu nome.
    Que durante a criação de uma rede precisamos indicar qual driver utilizaremos, geralmente, o driver bridge. 

Segue também uma breve lista dos comandos utilizados:

    hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
    docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
    docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.



O Docker Compose não é instalado por padrão no Linux, então você deve instalá-lo por fora. Para tal, baixe-o na sua versão mais atual, que pode ser visualizada no seu GitHub, executando o comando abaixo:

sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

Após isso, dê permissão de execução para o docker-compose:

sudo chmod +x /usr/local/bin/docker-compose

Pronto, o Docker Compose já está instalado no seu Linux!




Docker Cheat Sheet - Os Comandos Utilizados
Próxima Atividade

Segue a lista com os principais comandos utilizados durante o curso:

    Comandos relacionados às informações
        docker version - exibe a versão do docker que está instalada.
        docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
        docker ps - exibe todos os containers em execução no momento.
        docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.

    Comandos relacionados à execução
        docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
        docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
        docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container e define uma porta aleatória.
        docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
        docker run -v "CAMINHO_VOLUME" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container.
        docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.

    Comandos relacionados à inicialização/interrupção
        docker start ID_CONTAINER - inicia o container com id em questão.
        docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
        docker stop ID_CONTAINER - interrompe o container com id em questão.

    Comandos relacionados à remoção
        docker rm ID_CONTAINER - remove o container com id em questão.
        docker container prune - remove todos os containers que estão parados.
        docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.

    Comandos relacionados à construção de Dockerfile
        docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
        docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial.
        docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM CAMINHO_DOCKERFILE - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.

    Comandos relacionados ao Docker Hub
        docker login - inicia o processo de login no Docker Hub.
        docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
        docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.

    Comandos relacionados à rede
        hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
        docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.

    Comandos relacionados ao docker-compose
        docker-compose build - Realiza o build dos serviços relacionados ao arquivo docker-compose.yml, assim como verifica a sua sintaxe.
        docker-compose up - Sobe todos os containers relacionados ao docker-compose, desde que o build já tenha sido executado.
        docker-compose down - Para todos os serviços em execução que estejam relacionados ao arquivo docker-compose.yml.

